// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: llbuild3/Action.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// This source file is part of the Swift.org open source project
//
// Copyright (c) 2025 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Llbuild3_FileObject: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The path of the input/output. This path must be relative.
  public var path: String = String()

  public var type: Llbuild3_FileType = .plainFile

  /// ID of the CASTree FileInformation encoded object.
  public var object: Llbuild3_CASObjectID {
    get {return _object ?? Llbuild3_CASObjectID()}
    set {_object = newValue}
  }
  /// Returns true if `object` has been explicitly set.
  public var hasObject: Bool {return self._object != nil}
  /// Clears the value of `object`. Subsequent reads from it will return its default value.
  public mutating func clearObject() {self._object = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _object: Llbuild3_CASObjectID? = nil
}

public struct Llbuild3_Subprocess: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The command line arguments to execute on the remote machine.
  public var arguments: [String] = []

  /// The environment variables to set while executing the arguments.
  public var environment: [Llbuild3_Subprocess.EnvironmentVariable] = []

  public var workingDirectory: String = String()

  public var inputs: [Llbuild3_FileObject] = []

  public var outputPaths: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct EnvironmentVariable: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The variable name.
    public var name: String = String()

    /// The variable value.
    public var value: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Llbuild3_SubprocessResult: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var outputs: [Llbuild3_FileObject] = []

  public var exitCode: Int32 = 0

  public var stdout: Llbuild3_CASObjectID {
    get {return _stdout ?? Llbuild3_CASObjectID()}
    set {_stdout = newValue}
  }
  /// Returns true if `stdout` has been explicitly set.
  public var hasStdout: Bool {return self._stdout != nil}
  /// Clears the value of `stdout`. Subsequent reads from it will return its default value.
  public mutating func clearStdout() {self._stdout = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _stdout: Llbuild3_CASObjectID? = nil
}

public struct Llbuild3_Action: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var operation: Llbuild3_Action.OneOf_Operation? = nil

  public var casObject: Llbuild3_CASObjectID {
    get {
      if case .casObject(let v)? = operation {return v}
      return Llbuild3_CASObjectID()
    }
    set {operation = .casObject(newValue)}
  }

  public var subprocess: Llbuild3_Subprocess {
    get {
      if case .subprocess(let v)? = operation {return v}
      return Llbuild3_Subprocess()
    }
    set {operation = .subprocess(newValue)}
  }

  /// The label of the function used to execute the operation.
  public var function: Llbuild3_Label {
    get {return _function ?? Llbuild3_Label()}
    set {_function = newValue}
  }
  /// Returns true if `function` has been explicitly set.
  public var hasFunction: Bool {return self._function != nil}
  /// Clears the value of `function`. Subsequent reads from it will return its default value.
  public mutating func clearFunction() {self._function = nil}

  /// If true, this action cannot be cached or de-duped.
  public var volatile: Bool = false

  public var platform: Llbuild3_Platform {
    get {return _platform ?? Llbuild3_Platform()}
    set {_platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  public var hasPlatform: Bool {return self._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  public mutating func clearPlatform() {self._platform = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Operation: Equatable, Sendable {
    case casObject(Llbuild3_CASObjectID)
    case subprocess(Llbuild3_Subprocess)

  }

  public init() {}

  fileprivate var _function: Llbuild3_Label? = nil
  fileprivate var _platform: Llbuild3_Platform? = nil
}

public struct Llbuild3_Platform: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var properties: [Llbuild3_Platform.Property] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Property: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var name: String = String()

    public var value: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Llbuild3_ActionResult: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var actionResultValue: Llbuild3_ActionResult.OneOf_ActionResultValue? = nil

  public var casObject: Llbuild3_CASObjectID {
    get {
      if case .casObject(let v)? = actionResultValue {return v}
      return Llbuild3_CASObjectID()
    }
    set {actionResultValue = .casObject(newValue)}
  }

  public var subprocess: Llbuild3_SubprocessResult {
    get {
      if case .subprocess(let v)? = actionResultValue {return v}
      return Llbuild3_SubprocessResult()
    }
    set {actionResultValue = .subprocess(newValue)}
  }

  public var metadata: Llbuild3_ActionExecutionMetadata {
    get {return _metadata ?? Llbuild3_ActionExecutionMetadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_ActionResultValue: Equatable, Sendable {
    case casObject(Llbuild3_CASObjectID)
    case subprocess(Llbuild3_SubprocessResult)

  }

  public init() {}

  fileprivate var _metadata: Llbuild3_ActionExecutionMetadata? = nil
}

public struct Llbuild3_ActionExecutionMetadata: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var worker: String {
    get {return _storage._worker}
    set {_uniqueStorage()._worker = newValue}
  }

  /// When was the action added to the queue.
  public var queued: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._queued ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._queued = newValue}
  }
  /// Returns true if `queued` has been explicitly set.
  public var hasQueued: Bool {return _storage._queued != nil}
  /// Clears the value of `queued`. Subsequent reads from it will return its default value.
  public mutating func clearQueued() {_uniqueStorage()._queued = nil}

  /// When was the action dispatched.
  public var dispatched: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._dispatched ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._dispatched = newValue}
  }
  /// Returns true if `dispatched` has been explicitly set.
  public var hasDispatched: Bool {return _storage._dispatched != nil}
  /// Clears the value of `dispatched`. Subsequent reads from it will return its default value.
  public mutating func clearDispatched() {_uniqueStorage()._dispatched = nil}

  /// When the worker received the action.
  public var workerStart: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._workerStart ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._workerStart = newValue}
  }
  /// Returns true if `workerStart` has been explicitly set.
  public var hasWorkerStart: Bool {return _storage._workerStart != nil}
  /// Clears the value of `workerStart`. Subsequent reads from it will return its default value.
  public mutating func clearWorkerStart() {_uniqueStorage()._workerStart = nil}

  /// When the worker completed the action, including all stages.
  public var workerCompleted: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._workerCompleted ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._workerCompleted = newValue}
  }
  /// Returns true if `workerCompleted` has been explicitly set.
  public var hasWorkerCompleted: Bool {return _storage._workerCompleted != nil}
  /// Clears the value of `workerCompleted`. Subsequent reads from it will return its default value.
  public mutating func clearWorkerCompleted() {_uniqueStorage()._workerCompleted = nil}

  /// When the worker started executing the action command.
  public var executionStart: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._executionStart ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._executionStart = newValue}
  }
  /// Returns true if `executionStart` has been explicitly set.
  public var hasExecutionStart: Bool {return _storage._executionStart != nil}
  /// Clears the value of `executionStart`. Subsequent reads from it will return its default value.
  public mutating func clearExecutionStart() {_uniqueStorage()._executionStart = nil}

  /// When the worker completed executing the action command.
  public var executionCompleted: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._executionCompleted ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._executionCompleted = newValue}
  }
  /// Returns true if `executionCompleted` has been explicitly set.
  public var hasExecutionCompleted: Bool {return _storage._executionCompleted != nil}
  /// Clears the value of `executionCompleted`. Subsequent reads from it will return its default value.
  public mutating func clearExecutionCompleted() {_uniqueStorage()._executionCompleted = nil}

  /// The amount of time the worker spent executing the action.
  public var executionDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._executionDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._executionDuration = newValue}
  }
  /// Returns true if `executionDuration` has been explicitly set.
  public var hasExecutionDuration: Bool {return _storage._executionDuration != nil}
  /// Clears the value of `executionDuration`. Subsequent reads from it will return its default value.
  public mutating func clearExecutionDuration() {_uniqueStorage()._executionDuration = nil}

  /// When the worker started uploading action outputs.
  public var outputUploadStart: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._outputUploadStart ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._outputUploadStart = newValue}
  }
  /// Returns true if `outputUploadStart` has been explicitly set.
  public var hasOutputUploadStart: Bool {return _storage._outputUploadStart != nil}
  /// Clears the value of `outputUploadStart`. Subsequent reads from it will return its default value.
  public mutating func clearOutputUploadStart() {_uniqueStorage()._outputUploadStart = nil}

  /// When the worker finished uploading action outputs.
  public var outputUploadCompleted: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._outputUploadCompleted ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._outputUploadCompleted = newValue}
  }
  /// Returns true if `outputUploadCompleted` has been explicitly set.
  public var hasOutputUploadCompleted: Bool {return _storage._outputUploadCompleted != nil}
  /// Clears the value of `outputUploadCompleted`. Subsequent reads from it will return its default value.
  public mutating func clearOutputUploadCompleted() {_uniqueStorage()._outputUploadCompleted = nil}

  /// When the worker finished uploading action outputs.
  public var completed: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._completed ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._completed = newValue}
  }
  /// Returns true if `completed` has been explicitly set.
  public var hasCompleted: Bool {return _storage._completed != nil}
  /// Clears the value of `completed`. Subsequent reads from it will return its default value.
  public mutating func clearCompleted() {_uniqueStorage()._completed = nil}

  public var additionalData: [SwiftProtobuf.Google_Protobuf_Any] {
    get {return _storage._additionalData}
    set {_uniqueStorage()._additionalData = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "llbuild3"

extension Llbuild3_FileObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FileObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "type"),
    3: .same(proto: "object"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._object) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 1)
    }
    if self.type != .plainFile {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    try { if let v = self._object {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Llbuild3_FileObject, rhs: Llbuild3_FileObject) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.type != rhs.type {return false}
    if lhs._object != rhs._object {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Llbuild3_Subprocess: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Subprocess"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "arguments"),
    2: .same(proto: "environment"),
    3: .same(proto: "workingDirectory"),
    4: .same(proto: "inputs"),
    5: .same(proto: "outputPaths"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.arguments) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.environment) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.workingDirectory) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.outputPaths) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.arguments.isEmpty {
      try visitor.visitRepeatedStringField(value: self.arguments, fieldNumber: 1)
    }
    if !self.environment.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.environment, fieldNumber: 2)
    }
    if !self.workingDirectory.isEmpty {
      try visitor.visitSingularStringField(value: self.workingDirectory, fieldNumber: 3)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 4)
    }
    if !self.outputPaths.isEmpty {
      try visitor.visitRepeatedStringField(value: self.outputPaths, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Llbuild3_Subprocess, rhs: Llbuild3_Subprocess) -> Bool {
    if lhs.arguments != rhs.arguments {return false}
    if lhs.environment != rhs.environment {return false}
    if lhs.workingDirectory != rhs.workingDirectory {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.outputPaths != rhs.outputPaths {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Llbuild3_Subprocess.EnvironmentVariable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Llbuild3_Subprocess.protoMessageName + ".EnvironmentVariable"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Llbuild3_Subprocess.EnvironmentVariable, rhs: Llbuild3_Subprocess.EnvironmentVariable) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Llbuild3_SubprocessResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubprocessResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "outputs"),
    2: .same(proto: "exitCode"),
    3: .same(proto: "stdout"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.exitCode) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._stdout) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 1)
    }
    if self.exitCode != 0 {
      try visitor.visitSingularInt32Field(value: self.exitCode, fieldNumber: 2)
    }
    try { if let v = self._stdout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Llbuild3_SubprocessResult, rhs: Llbuild3_SubprocessResult) -> Bool {
    if lhs.outputs != rhs.outputs {return false}
    if lhs.exitCode != rhs.exitCode {return false}
    if lhs._stdout != rhs._stdout {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Llbuild3_Action: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Action"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "casObject"),
    2: .same(proto: "subprocess"),
    3: .same(proto: "function"),
    4: .same(proto: "volatile"),
    5: .same(proto: "platform"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Llbuild3_CASObjectID?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .casObject(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .casObject(v)
        }
      }()
      case 2: try {
        var v: Llbuild3_Subprocess?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .subprocess(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .subprocess(v)
        }
      }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._function) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.volatile) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._platform) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.operation {
    case .casObject?: try {
      guard case .casObject(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .subprocess?: try {
      guard case .subprocess(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try { if let v = self._function {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.volatile != false {
      try visitor.visitSingularBoolField(value: self.volatile, fieldNumber: 4)
    }
    try { if let v = self._platform {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Llbuild3_Action, rhs: Llbuild3_Action) -> Bool {
    if lhs.operation != rhs.operation {return false}
    if lhs._function != rhs._function {return false}
    if lhs.volatile != rhs.volatile {return false}
    if lhs._platform != rhs._platform {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Llbuild3_Platform: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Platform"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "properties"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.properties) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.properties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.properties, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Llbuild3_Platform, rhs: Llbuild3_Platform) -> Bool {
    if lhs.properties != rhs.properties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Llbuild3_Platform.Property: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Llbuild3_Platform.protoMessageName + ".Property"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Llbuild3_Platform.Property, rhs: Llbuild3_Platform.Property) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Llbuild3_ActionResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ActionResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "casObject"),
    2: .same(proto: "subprocess"),
    3: .same(proto: "metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Llbuild3_CASObjectID?
        var hadOneofValue = false
        if let current = self.actionResultValue {
          hadOneofValue = true
          if case .casObject(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.actionResultValue = .casObject(v)
        }
      }()
      case 2: try {
        var v: Llbuild3_SubprocessResult?
        var hadOneofValue = false
        if let current = self.actionResultValue {
          hadOneofValue = true
          if case .subprocess(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.actionResultValue = .subprocess(v)
        }
      }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.actionResultValue {
    case .casObject?: try {
      guard case .casObject(let v)? = self.actionResultValue else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .subprocess?: try {
      guard case .subprocess(let v)? = self.actionResultValue else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Llbuild3_ActionResult, rhs: Llbuild3_ActionResult) -> Bool {
    if lhs.actionResultValue != rhs.actionResultValue {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Llbuild3_ActionExecutionMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ActionExecutionMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "worker"),
    2: .same(proto: "queued"),
    3: .same(proto: "dispatched"),
    4: .same(proto: "workerStart"),
    5: .same(proto: "workerCompleted"),
    6: .same(proto: "executionStart"),
    7: .same(proto: "executionCompleted"),
    8: .same(proto: "executionDuration"),
    9: .same(proto: "outputUploadStart"),
    10: .same(proto: "outputUploadCompleted"),
    11: .same(proto: "completed"),
    12: .same(proto: "additionalData"),
  ]

  fileprivate class _StorageClass {
    var _worker: String = String()
    var _queued: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _dispatched: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _workerStart: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _workerCompleted: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _executionStart: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _executionCompleted: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _executionDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _outputUploadStart: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _outputUploadCompleted: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _completed: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _additionalData: [SwiftProtobuf.Google_Protobuf_Any] = []

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _worker = source._worker
      _queued = source._queued
      _dispatched = source._dispatched
      _workerStart = source._workerStart
      _workerCompleted = source._workerCompleted
      _executionStart = source._executionStart
      _executionCompleted = source._executionCompleted
      _executionDuration = source._executionDuration
      _outputUploadStart = source._outputUploadStart
      _outputUploadCompleted = source._outputUploadCompleted
      _completed = source._completed
      _additionalData = source._additionalData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._worker) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._queued) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._dispatched) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._workerStart) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._workerCompleted) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._executionStart) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._executionCompleted) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._executionDuration) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._outputUploadStart) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._outputUploadCompleted) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._completed) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._additionalData) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._worker.isEmpty {
        try visitor.visitSingularStringField(value: _storage._worker, fieldNumber: 1)
      }
      try { if let v = _storage._queued {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._dispatched {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._workerStart {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._workerCompleted {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._executionStart {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._executionCompleted {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._executionDuration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._outputUploadStart {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._outputUploadCompleted {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._completed {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      if !_storage._additionalData.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._additionalData, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Llbuild3_ActionExecutionMetadata, rhs: Llbuild3_ActionExecutionMetadata) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._worker != rhs_storage._worker {return false}
        if _storage._queued != rhs_storage._queued {return false}
        if _storage._dispatched != rhs_storage._dispatched {return false}
        if _storage._workerStart != rhs_storage._workerStart {return false}
        if _storage._workerCompleted != rhs_storage._workerCompleted {return false}
        if _storage._executionStart != rhs_storage._executionStart {return false}
        if _storage._executionCompleted != rhs_storage._executionCompleted {return false}
        if _storage._executionDuration != rhs_storage._executionDuration {return false}
        if _storage._outputUploadStart != rhs_storage._outputUploadStart {return false}
        if _storage._outputUploadCompleted != rhs_storage._outputUploadCompleted {return false}
        if _storage._completed != rhs_storage._completed {return false}
        if _storage._additionalData != rhs_storage._additionalData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
