// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: llbuild3/Artifact.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// This source file is part of the Swift.org open source project
//
// Copyright (c) 2024-2025 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enum representing the supported artifact types
public enum Llbuild3_ArtifactType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// Regular file.
  case file // = 0

  /// Directory containing files and/or other directories.
  case directory // = 1

  /// Arbitrary data blob with no file system representation
  case blob // = 2

  /// Key-Value Mapping of Strings
  case dict // = 3

  /// List of Strings
  case list // = 4

  /// Build Graph
  case buildGraph // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .file
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .file
    case 1: self = .directory
    case 2: self = .blob
    case 3: self = .dict
    case 4: self = .list
    case 5: self = .buildGraph
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .file: return 0
    case .directory: return 1
    case .blob: return 2
    case .dict: return 3
    case .list: return 4
    case .buildGraph: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Llbuild3_ArtifactType] = [
    .file,
    .directory,
    .blob,
    .dict,
    .list,
    .buildGraph,
  ]

}

public struct Llbuild3_DictObject: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var contents: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Llbuild3_ListObject: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var entry: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Llbuild3_Artifact: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var label: Llbuild3_Label {
    get {return _label ?? Llbuild3_Label()}
    set {_label = newValue}
  }
  /// Returns true if `label` has been explicitly set.
  public var hasLabel: Bool {return self._label != nil}
  /// Clears the value of `label`. Subsequent reads from it will return its default value.
  public mutating func clearLabel() {self._label = nil}

  public var type: Llbuild3_ArtifactType = .file

  public var value: Llbuild3_Artifact.OneOf_Value? = nil

  public var casObject: Llbuild3_CASID {
    get {
      if case .casObject(let v)? = value {return v}
      return Llbuild3_CASID()
    }
    set {value = .casObject(newValue)}
  }

  public var blob: Data {
    get {
      if case .blob(let v)? = value {return v}
      return Data()
    }
    set {value = .blob(newValue)}
  }

  public var dict: Llbuild3_DictObject {
    get {
      if case .dict(let v)? = value {return v}
      return Llbuild3_DictObject()
    }
    set {value = .dict(newValue)}
  }

  public var list: Llbuild3_ListObject {
    get {
      if case .list(let v)? = value {return v}
      return Llbuild3_ListObject()
    }
    set {value = .list(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Value: Equatable, @unchecked Sendable {
    case casObject(Llbuild3_CASID)
    case blob(Data)
    case dict(Llbuild3_DictObject)
    case list(Llbuild3_ListObject)

  }

  public init() {}

  fileprivate var _label: Llbuild3_Label? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "llbuild3"

extension Llbuild3_ArtifactType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ARTIFACT_TYPE_FILE"),
    1: .same(proto: "ARTIFACT_TYPE_DIRECTORY"),
    2: .same(proto: "ARTIFACT_TYPE_BLOB"),
    3: .same(proto: "ARTIFACT_TYPE_DICT"),
    4: .same(proto: "ARTIFACT_TYPE_LIST"),
    5: .same(proto: "ARTIFACT_TYPE_BUILD_GRAPH"),
  ]
}

extension Llbuild3_DictObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DictObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "contents"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.contents) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contents.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.contents, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Llbuild3_DictObject, rhs: Llbuild3_DictObject) -> Bool {
    if lhs.contents != rhs.contents {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Llbuild3_ListObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "entry"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.entry) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entry.isEmpty {
      try visitor.visitRepeatedStringField(value: self.entry, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Llbuild3_ListObject, rhs: Llbuild3_ListObject) -> Bool {
    if lhs.entry != rhs.entry {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Llbuild3_Artifact: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Artifact"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .same(proto: "type"),
    3: .standard(proto: "cas_object"),
    4: .same(proto: "blob"),
    5: .same(proto: "dict"),
    6: .same(proto: "list"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._label) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try {
        var v: Llbuild3_CASID?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .casObject(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .casObject(v)
        }
      }()
      case 4: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .blob(v)
        }
      }()
      case 5: try {
        var v: Llbuild3_DictObject?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dict(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dict(v)
        }
      }()
      case 6: try {
        var v: Llbuild3_ListObject?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .list(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .list(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._label {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.type != .file {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    switch self.value {
    case .casObject?: try {
      guard case .casObject(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .blob?: try {
      guard case .blob(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    }()
    case .dict?: try {
      guard case .dict(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .list?: try {
      guard case .list(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Llbuild3_Artifact, rhs: Llbuild3_Artifact) -> Bool {
    if lhs._label != rhs._label {return false}
    if lhs.type != rhs.type {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
